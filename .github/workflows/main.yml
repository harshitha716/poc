name: Build and Deploy To Production

on:
  workflow_dispatch:
  repository_dispatch:
    types: [deploy-prod]
env:
  APP_NAME: pantheon
  GITHUB_ACTOR_SLACK: ${{ github.event.client_payload.github_actor }}
  NEW_TAG: ${{ github.event.client_payload.new_tag }}

concurrency:
  group: production-deploy
  cancel-in-progress: false

jobs:
  prepare-env:
    name: Prepare Env
    runs-on: ubuntu-latest
    timeout-minutes: 2
    outputs:
      AWS_REGION: ${{ steps.vars.outputs.AWS_REGION }}
      AWS_ACCOUNT_ID: ${{ steps.vars.outputs.AWS_ACCOUNT_ID }}
      EKS_CLUSTER: ${{ steps.vars.outputs.EKS_CLUSTER }}
      ECR_REPO: ${{ steps.vars.outputs.ECR_REPO }}
      APP_NAME: ${{ steps.vars.outputs.APP_NAME }}
      SLACK_WEBHOOK_URL: ${{ steps.vars.outputs.SLACK_WEBHOOK_URL }}
      ENVIRONMENT: ${{ steps.vars.outputs.ENVIRONMENT }}
      STG_TRIGGER_TOKEN: ${{ github.event.client_payload.trigger_token }}
      PRD_TRIGGER_TOKEN: ${{ steps.vars.outputs.TRIGGER_TOKEN }}
      SSH_PRIVATE_KEY: ${{ steps.vars.outputs.SSH_PRIVATE_KEY }}
    steps:
      - id: vars
        run: |
          echo "AWS_REGION=us-east-2" >> $GITHUB_OUTPUT
          echo "AWS_ACCOUNT_ID=842675998483" >> $GITHUB_OUTPUT
          echo "EKS_CLUSTER=CI-CD" >> $GITHUB_OUTPUT
          echo "ECR_REPO=harshitha" >> $GITHUB_OUTPUT
          echo "SLACK_WEBHOOK_URL=PRD_SLACK_WEBHOOK_URL" >> $GITHUB_OUTPUT
          echo "PRD_TRIGGER_TOKEN=PRD_TRIGGER_TOKEN" >> $GITHUB_OUTPUT
          echo "ENVIRONMENT=Production" >> $GITHUB_OUTPUT
          echo "APP_NAME=$APP_NAME" >> $GITHUB_OUTPUT
          echo "SSH_PRIVATE_KEY=SSH_PRIVATE_KEY" >> $GITHUB_OUTPUT
      - name: Output Branch name
        run: |
          echo ":seedling: Branch:${GITHUB_REF#refs/heads/}" >> $GITHUB_STEP_SUMMARY

  build-push-image:
    needs:
      - prepare-env
    name: Build and Push Image
    permissions:
      id-token: write
      contents: read
    runs-on: ubuntu-latest
    env:
      AWS_REGION: ${{needs.prepare-env.outputs.AWS_REGION}}
      AWS_ACCOUNT_ID: ${{needs.prepare-env.outputs.AWS_ACCOUNT_ID}}
      ECR_REPO: ${{needs.prepare-env.outputs.ECR_REPO}}
      APP_NAME: ${{needs.prepare-env.outputs.APP_NAME}}
      SSH_PRIVATE_KEY: ${{needs.prepare-env.outputs.SSH_PRIVATE_KEY}}
    outputs:
      IMAGE_TAG: ${{ steps.build.outputs.IMAGE_TAG }}
      ECR_REPO: ${{ steps.build.outputs.ECR_REPO }}

    steps:
      - name: Debug output
        run: |
          echo "NEW_TAG=$NEW_TAG"
          echo "AWS_ACCOUNT_ID=$AWS_ACCOUNT_ID"
          echo "AWS_REGION=$AWS_REGION"
          
      - name: "Checkout repository on : ${{ env.NEW_TAG }}"
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{env.NEW_TAG}}

      # OIDC Authentication to AWS
      - name: 'Set up AWS credentials using OIDC'
        uses: aws-actions/configure-aws-credentials@v1
        with:
          role-to-assume: arn:aws:iam::${{ needs.prepare-env.outputs.AWS_ACCOUNT_ID }}:role/GitHubActionsRole # Role with trust policy for OIDC
          aws-region: ${{ env.AWS_REGION }}
          role-session-name: GitHubActionsSession

      - name: "Login to Amazon ECR"
        run: |
          aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com

      - id: build
        name: Build and Push Image
        env:
          ECR_REGISTRY: "$AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com"
        run: |
          ECR_REPO="${ECR_REGISTRY}/${ECR_REPO}/${APP_NAME}"
          IMAGE_TAG=$NEW_TAG
          docker build -t $ECR_REPO:$IMAGE_TAG --build-arg SSH_PRIVATE_KEY="${{secrets[env.SSH_PRIVATE_KEY]}}" .
          docker push $ECR_REPO:$IMAGE_TAG
          echo "ECR_REPO=$ECR_REPO" >> $GITHUB_OUTPUT
          echo "IMAGE_TAG=$IMAGE_TAG" >> $GITHUB_OUTPUT
          echo ":whale2:App Image Tag: ${IMAGE_TAG} " >> $GITHUB_STEP_SUMMARY

  deploy-to-eks:
    name: Deploy to EKS
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    timeout-minutes: 15
    needs:
      - prepare-env
      - build-push-image
    env:
      APP_NAME: ${{needs.prepare-env.outputs.APP_NAME}}
      AWS_REGION: ${{needs.prepare-env.outputs.AWS_REGION}}
      EKS_CLUSTER: ${{needs.prepare-env.outputs.EKS_CLUSTER}}
      ECR_REPO: ${{needs.build-push-image.outputs.ECR_REPO}}
      IMAGE_TAG: ${{needs.build-push-image.outputs.IMAGE_TAG}}
      ENVIRONMENT: ${{needs.prepare-env.outputs.ENVIRONMENT}}

    steps:
      - name: "Checkout repository on : ${{ env.NEW_TAG }}"
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{env.NEW_TAG}}

      # OIDC Authentication to AWS
      - name: 'Set up AWS credentials using OIDC'
        uses: aws-actions/configure-aws-credentials@v1
        with:
          role-to-assume: arn:aws:iam::${{ needs.prepare-env.outputs.AWS_ACCOUNT_ID }}:role/GitHubActionsRole # Role with trust policy for OIDC
          aws-region: ${{ env.AWS_REGION }}
          role-session-name: GitHubActionsSession

      - name: "Set up kubectl"
        run: |
          aws eks update-kubeconfig --region $AWS_REGION --name $EKS_CLUSTER

      - name: "Install Helm"
        uses: azure/setup-helm@v4
        with:
          version: "v3.7.2"

      - name: Deploy to EKS with Helm
        run: |
          helm upgrade --install ${APP_NAME} ${APP_NAME}-chart \
            --namespace default \
            --set image.repository="${ECR_REPO}" \
            --set image.tag="${IMAGE_TAG}" \
            --values helm/${ENVIRONMENT}-values.yaml \
            --wait \
            --timeout 10m0s \
            --create-namespace

  slack-notification:
    name: Slack Notification
    if: always()
    runs-on: ubuntu-latest
    needs:
      - prepare-env
      - build-push-image
      - deploy-to-eks
    env:
      SLACK_WEBHOOK_URL: ${{needs.prepare-env.outputs.SLACK_WEBHOOK_URL}}
      ENVIRONMENT: ${{needs.prepare-env.outputs.ENVIRONMENT}}
    steps:
      - uses: technote-space/workflow-conclusion-action@v3
      - name: Update slack message body
        id: body
        run: |
          if [ '${{ env.WORKFLOW_CONCLUSION }}' == 'success' ]
          then
            echo "SLACK_MESSAGE=Success :white_check_mark:" >> $GITHUB_OUTPUT
          elif [ '${{ env.WORKFLOW_CONCLUSION }}'  == 'failure' ]
          then
            echo "SLACK_MESSAGE=Failed :x:"   >> $GITHUB_OUTPUT
          elif [ '${{ env.WORKFLOW_CONCLUSION }}'  == 'cancelled' ]
          then
            echo "SLACK_MESSAGE=Cancelled :grey_exclamation:"   >> $GITHUB_OUTPUT
          fi
      - name: Slack Notification
        uses: Zampfi/town_crier@v1
        env:
          SLACK_COLOR: ${{ env.WORKFLOW_CONCLUSION }} # or a specific color like 'good' or '#ff00ff'
          SLACK_ICON: https://media-exp1.licdn.com/dms/image/C4D0BAQEsXCky1jDBjw/company-logo_200_200/0/1650191766210?e=2147483647&v=beta&t=skUuL49MkcdxJZmEEN2wy5E7Xqy176Ar7EPsKoSMUEE
          SLACK_MESSAGE: ${{ steps.body.outputs.SLACK_MESSAGE }}
          SLACK_TITLE: Build Status
          ZAMP_ENV: ${{ env.ENVIRONMENT }}
          SLACK_FOOTER: "<${{ github.server_url }}/${{ github.repository }}|${{ github.repository }}>"
          SLACK_USERNAME: Zamp-Devops
          SLACK_WEBHOOK: ${{ secrets[env.SLACK_WEBHOOK_URL] }}
          SLACK_MSG_AUTHOR: ${{ env.GITHUB_ACTOR_SLACK }}
          GITHUB_CUSTOM_REF: "refs/heads/${{env.NEW_TAG}}"
